// vertical align el inside parent with fixed height/min-height
// usage
// html - .parent>.child
// scss - @include v-align;
//     or @include v-align(250px);
//     or @include v-align(250px, bottom, before);
//
@mixin v-align($va-height: 100%, $va-direction: middle, $va-pseudo: after) {
	white-space: nowrap;
	text-align: center;

	&:#{$va-pseudo} {
		content: '';
		display: inline-block;
		vertical-align: $va-direction;
		width: 0;
		min-height: $va-height;
	}

	> * {
		white-space: normal;
		display: inline-block;
		vertical-align: $va-direction;
		max-width: 99%;
	}
}


$animation-speed: .3s !default;
$easing-default: linear;


@mixin animate($properties, $duration: $animation-speed, $easing: $easing-default) {
	$list:();
	@each $prop in $properties {
		$str: #{$prop} #{$duration} #{$easing};
		$list: join($list, #{$str}, comma);
	}
	transition: $list;
}


/// Mixin for styling form-placeholders
/// @example scss - Usage
///   @include placeholder {
///    color: #333;
///   }
///
///   input[type='text'],
///   input[type='tel'],
///   input[type='email'] {
///     @include placeholder {
///      color: red;
///     }
///   }

@mixin placeholder {
	&::-webkit-input-placeholder {@content}
	&::-moz-placeholder {opacity: 1; @content}
	&:-moz-placeholder {@content}
	&:-ms-input-placeholder {@content}
	&.placeholder {@content}
}


// alignment
@mixin align($align: top) {
	display: inline-block;
	vertical-align: $align;
}


@mixin inline-reset {
	font-size: 0;
	line-height: 0;
	> * {
		font-size: $font-size-base;
		line-height: $line-height-base;
	}
}


@mixin clear-list {
	margin: 0;
	padding: 0;
	list-style: none;
}


@mixin clearfix {
	&:after{
		clear: both;
		display: block;
		content: "";
	}
}


@mixin box($size) {
	width: $size;
	height: $size;
	border-radius: $size;
}


// mixin for position
@mixin position {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}


// size
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

// responsive image
@mixin responsive-image {
	display: block;
	width: 100%;
	height: auto;
}

// custom font mixin
@mixin fontface ($fontfamily, $filename, $fontweight: normal, $fontstyle: normal) {
	font-family: $fontfamily;
	src:url('../fonts/#{$filename}.eot');
	src:url('../fonts/#{$filename}.eot?#iefix') format('embedded-opentype'),
		url('../fonts/#{$filename}.woff') format('woff'),
		url('../fonts/#{$filename}.ttf') format('truetype'),
		url('../fonts/#{$filename}.svg#{$filename}') format('svg');
	font-weight: $fontweight;
	font-style: $fontstyle;
}


@function rem-separator($list) {
  @if function-exists("list-separator")==true {
    @return list-separator($list);
  }
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }
  @return if($test-list==$list, space, comma);
  }

  @mixin rem-base($zoom: 100%) {
    font-size: $zoom / 16px * $rem-base;
  }

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);
  @each $value in $values {
    @if type-of($value)=="number" and unit($value)=="rem" and $to=="px" {
      $result: append($result, $value / 1rem * $rem-base, $separator);
    }
    @else if type-of($value)=="number" and unit($value)=="px" and $to=="rem" {
      $result: append($result, $value / ($rem-base / 1rem), $separator);
    }
    @else if type-of($value)=="list" {
      $result: append($result, rem-convert($to, $value...), $separator);
    }
    @else {
      $result: append($result, $value, $separator);
    }
  }
  @return if(length($result)==1, nth($result, 1), $result);
  }

@function rem($values...) {
  @return rem-convert(rem, $values...);
  }

@mixin rem($properties, $values...) {
  @if type-of($properties)=="map" {
    @each $property in map-keys($properties) {
    @include rem($property, map-get($properties, $property));
    }
  }
  @else {
    @each $property in $properties {
    #{$property}: rem-convert(rem, $values...);
    }
  }
}

// $base-font-size: 100% !default;
// //$base-line-height is 24px while $base-font-size is 16px
// $base-line-height: 150%;
// It strips the unit of measure and returns it
//
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of em\'s.
// Call with 1, 2, 3 or 4 parameters, \'px\' is not required but supported
// rem-calc(10 20 30px 40);
// Space delimited, if you want to delimit using comma\'s, wrap it in another pair of brackets
// rem-calc((10, 20, 30, 40px));
// Optionally call with a different base (eg: 8px) to calculate em.
// rem-calc(16px 32px 48px, 8px);
// If you require to comma separate your list
// rem-calc((16px, 32px, 48), 8px);
//
@function convert-to-rem($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value==0rem) {
    $value: 0;
  } // Turn 0em into 0
  @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);
  @if $max==1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }
  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}